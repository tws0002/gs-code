#! /software/Nuke/Linux64/Nuke6.2v3/Nuke6.2 -nx
version 6.2 v3
Gizmo {
 inputs 0
 help "Choose your wave type, set the values and press 'Generate Expression'. Load the 'Result' into the curve editor. To use this wave to control other nodes, CTRL drag the Result's curve icon to a node value of your choice."
 label "\[value waveType]"
 note_font "Bitstream Vera Sans"
 addUserKnob {20 WaveMaker_v3 l "WaveMaker v3"}
 addUserKnob {26 note1 l "" +STARTLINE T "MAIN WAVE"}
 addUserKnob {4 waveType l "Wave Type" M {Sine Random Noise Triangle Bounce Saw SawParabolic SawParabolicR SawExponential "" ""}}
 addUserKnob {1 minVal l "Min Value" t "The resulting wave will never go below this value"}
 minVal 0
 addUserKnob {1 maxVal l "Max Value" t "The resulting wave will never go above this value"}
 maxVal 1
 addUserKnob {7 speed l "Speed (frequency)" t "Number of frames between peaks (when using Sine wave)" R 1 100}
 speed 10
 addUserKnob {7 theOffset l "Time Offset" t "Use this to slide the wave forward or back in time. For example: if you require the wave to be at the zero point at the start of the shot you can adjust it with this." R -10 10}
 addUserKnob {6 squarify l Squarify t "Tick this box to turn any wave into a square wave version. Any value below the centre gets turned to the Min Value, any value above gets turned to the Max Value. Use it on a simple sine wave to get a standard square wave." +STARTLINE}
 addUserKnob {6 useController l "Use modulator wave" t "If this is ticked, the expression generated will use the modulator wave to affect the amplitude of the generated wave." +STARTLINE}
 addUserKnob {26 space l "" +STARTLINE T "   "}
 addUserKnob {22 generate l "Generate Expression" t "This takes the above values and generates a normal nuke expression below. You can link to this to drive other nodes in your script. If you change the wave type, press generate again to update." T "type = nuke.thisNode().knob(\"waveType\").value()\ncontroll = nuke.thisNode().knob(\"useController\").value()\n\nsquareExp = \" > ((maxVal/2)+(minVal/2)) ? maxVal : minVal\"\n\nsineExp1 = \"((sin(((frame*(pi*2/(speed/2))/2)+theOffset))+1)/2)\"\nrandomExp1 = \"(random((frame/speed)+theOffset))\"\nnoiseExp1 = \"((1*(noise((frame/speed)+theOffset))+1 ) /2 )\"\ntriangleExp1 = \"((((2*asin(sin(2*pi*(frame/speed)+theOffset)))/pi) / 2)+0.5)\"\nbounceExp1 = \"(sin(((frame/speed)*pi)+theOffset)>0?sin(((frame/speed)*pi)+theOffset):cos((((frame/speed)*pi)+theOffset)+(pi/2)))\"\nsawExp1 = \"(1/speed)*(((frame-1)+theOffset) % speed)\"\nsawParabolicExp1 = \"(sin((1/(pi/2))*(((frame-1)+theOffset)/(speed/2.46666666)) % (pi/2)))>0.99999?1:(sin((1/(pi/2))*(((frame-1)+theOffset)/(speed/2.46666666)) % (pi/2)))\"\nsawParabolicRExp1 = \"(cos((1/(pi/2))*(((frame-1)+theOffset)/(speed/2.46666666)) % (pi/2)))>0.99999?1:(cos((1/(pi/2))*(((frame-1)+theOffset)/(speed/2.46666666)) % (pi/2)))\"\nsawExponentialExp1 = \"(((((exp((1/(pi/2))*(((frame-1)+theOffset)/(speed/4.934802)) % pi*2)))/534.5)) - 0.00186741)>0.999987?1:(((((exp((1/(pi/2))*(((frame-1)+theOffset)/(speed/4.934802)) % pi*2)))/534.5)) - 0.00186741)\"\n\nmaxMinExp =  \" * (maxVal-minVal) ) + minVal\"\n\nsineExp2 = \"(\" + sineExp1 + maxMinExp\nrandomExp2 = \"(\" + randomExp1 + maxMinExp\nnoiseExp2 = \"(\" + noiseExp1 + maxMinExp\ntriangleExp2 = \"(\" + triangleExp1 + maxMinExp\nbounceExp2 = \"(\" + bounceExp1 + maxMinExp\nsawExp2 = \"(\" + sawExp1 + maxMinExp\nsawParabolicExp2 = \"(\" + sawParabolicExp1 + maxMinExp\nsawParabolicRExp2 = \"(\" + sawParabolicRExp1 + maxMinExp\nsawExponentialExp2 = \"(\" + sawExponentialExp1 + maxMinExp\n\nmaxMinCexp = \" * ((maxVal-((maxVal - minVal)*result2))-(minVal+((maxVal - minVal)*result2))))+(minVal+((maxVal - minVal)*result2))\"\n\nsineCexp = \"(\" + sineExp1 + maxMinCexp\nrandomCexp = \"(\" + randomExp1 + maxMinCexp\nnoiseCexp = \"(\" + noiseExp1 + maxMinCexp\ntriangleCexp = \"(\" + triangleExp1 + maxMinCexp\nbounceCexp = \"(\" + bounceExp1 + maxMinCexp\nsawCexp = \"(\" + sawExp1 + maxMinCexp\nsawParabolicCexp = \"(\" + sawParabolicExp1 + maxMinCexp\nsawParabolicRCexp = \"(\" + sawParabolicRExp1 + maxMinCexp\nsawExponentialCexp = \"(\" + sawExponentialExp1 + maxMinCexp\n\nsineCombinedExp = \"useController ? (\" + sineCexp + \") : (\" + sineExp2 + \")\"\nrandomCombinedExp = \"useController ? (\" + randomCexp + \") : (\" + randomExp2 + \")\"\nnoiseCombinedExp = \"useController ? (\" + noiseCexp + \") : (\" + noiseExp2 + \")\"\ntriangleCombinedExp = \"useController ? (\" + triangleCexp + \") : (\" + triangleExp2 + \")\"\nbounceCombinedExp = \"useController ? (\" + bounceCexp + \") : (\" + bounceExp2 + \")\"\nsawCombinedExp = \"useController ? (\" + sawCexp + \") : (\" + sawExp2 + \")\"\nsawParabolicCombinedExp = \"useController ? (\" + sawParabolicCexp + \") : (\" + sawParabolicExp2 + \")\"\nsawParabolicRCombinedExp = \"useController ? (\" + sawParabolicRCexp + \") : (\" + sawParabolicRExp2 + \")\"\nsawExponentialCombinedExp = \"useController ? (\" + sawExponentialCexp + \") : (\" + sawExponentialExp2 + \")\"\n\nif (type==\"Sine\"):\n\texp = \"squarify ? ((\" + sineCombinedExp + \")\" +  squareExp + \") : (\" + sineCombinedExp + \")\"\nelif (type==\"Random\"):\n\texp = \"squarify ? ((\" + randomCombinedExp + \")\" +  squareExp + \") : (\" + randomCombinedExp + \")\"\nelif (type==\"Noise\"):\n\texp = \"squarify ? ((\" + noiseCombinedExp + \")\" +  squareExp + \") : (\" + noiseCombinedExp + \")\"\nelif (type==\"Triangle\"):\n\texp = \"squarify ? ((\" + triangleCombinedExp + \")\" +  squareExp + \") : (\" + triangleCombinedExp + \")\"\nelif (type==\"Bounce\"):\n\texp = \"squarify ? ((\" + bounceCombinedExp + \")\" +  squareExp + \") : (\" + bounceCombinedExp + \")\"\nelif (type==\"Saw\"):\n\texp = \"squarify ? ((\" + sawCombinedExp + \")\" +  squareExp + \") : (\" + sawCombinedExp + \")\"\nelif (type==\"SawParabolic\"):\n\texp = \"squarify ? ((\" + sawParabolicCombinedExp + \")\" +  squareExp + \") : (\" + sawParabolicCombinedExp + \")\"\nelif (type==\"SawParabolicR\"):\n\texp = \"squarify ? ((\" + sawParabolicRCombinedExp + \")\" +  squareExp + \") : (\" + sawParabolicRCombinedExp + \")\"\nelif (type==\"SawExponential\"):\n\texp = \"squarify ? ((\" + sawExponentialCombinedExp + \")\" +  squareExp + \") : (\" + sawExponentialCombinedExp + \")\"\n\n\nnuke.thisNode().knob(\"result\").setExpression(exp)" +STARTLINE}
 addUserKnob {7 result l "Result (link to this value)" t "Link to this value to drive other nodes in your script.\n\n" R 0 10}
 result {{"squarify ? ((useController ? ((((sin(((frame*(pi*2/(speed/2))/2)+theOffset))+1)/2) * ((maxVal-((maxVal - minVal)*result2))-(minVal+((maxVal - minVal)*result2))))+(minVal+((maxVal - minVal)*result2))) : ((((sin(((frame*(pi*2/(speed/2))/2)+theOffset))+1)/2) * (maxVal-minVal) ) + minVal)) > ((maxVal/2)+(minVal/2)) ? maxVal : minVal) : (useController ? ((((sin(((frame*(pi*2/(speed/2))/2)+theOffset))+1)/2) * ((maxVal-((maxVal - minVal)*result2))-(minVal+((maxVal - minVal)*result2))))+(minVal+((maxVal - minVal)*result2))) : ((((sin(((frame*(pi*2/(speed/2))/2)+theOffset))+1)/2) * (maxVal-minVal) ) + minVal))"}}
 addUserKnob {26 ""}
 addUserKnob {26 note2 l "" +STARTLINE T "MODULATOR WAVE (optional)"}
 addUserKnob {4 waveType2 l "Controller Wave Type" M {Sine Random Noise Triangle Bounce Saw SawParabolic SawParabolicR SawExponential "" "" "" "" ""}}
 addUserKnob {7 theOffset2 l "Time Offset" t "Use this to move the controller wave back and forward in time." R -10 10}
 addUserKnob {7 speed2 l "Speed (frequency)" t "Number of frames between peaks (when using Sine wave)" R 50 100}
 speed2 100
 addUserKnob {22 generate2 l "Generate Expression" t "This takes the above values and generates a normal nuke expression below. This result can be used to affect the amplitude of the Main Wave. If you change the wave type, press generate again to update." T "type = nuke.thisNode().knob(\"waveType2\").value()\n\nif (type==\"Sine\"):\n\texp = \"(sin(((frame*(pi*2/(speed2/2))/2)+theOffset2))+1)/2\"\nelif (type==\"Random\"):\n\texp = \"random((frame/speed2)+theOffset2)\"\nelif (type==\"Noise\"):\n\texp = \"(1*(noise((frame/speed2)+theOffset2))+1 ) /2 \"\nelif (type==\"Triangle\"):\n\texp = \"(((2*asin(sin(2*pi*(frame/speed2)+theOffset2)))/pi) / 2)+0.5\"\nelif (type==\"Bounce\"):\n\texp = \"(sin(((frame/speed2)*pi)+theOffset2)>0?sin(((frame/speed2)*pi)+theOffset2):cos((((frame/speed2)*pi)+theOffset2)+(pi/2)))\"\nelif (type==\"Saw\"):\n\texp = \"(1/speed2)*(((frame-1)+theOffset2) % speed2)\"\nelif (type==\"SawParabolic\"):\n\texp = \"(sin((1/(pi/2))*(((frame-1)+theOffset2)/(speed2/2.46666666)) % (pi/2)))>0.99999?1:(sin((1/(pi/2))*(((frame-1)+theOffset2)/(speed2/2.46666666)) % (pi/2)))\"\nelif (type==\"SawParabolicR\"):\n\texp = \"(cos((1/(pi/2))*(((frame-1)+theOffset2)/(speed2/2.46666666)) % (pi/2)))>0.99999?1:(cos((1/(pi/2))*(((frame-1)+theOffset2)/(speed2/2.46666666)) % (pi/2)))\"\nelif (type==\"SawExponential\"):\n\texp = \"(((((exp((1/(pi/2))*(((frame-1)+theOffset2)/(speed2/4.934802)) % pi*2)))/534.5)) - 0.00186741)>0.999987?1:(((((exp((1/(pi/2))*(((frame-1)+theOffset2)/(speed2/4.934802)) % pi*2)))/534.5)) - 0.00186741)\"\n\nnuke.thisNode().knob(\"result2\").setExpression(exp)" +STARTLINE}
 addUserKnob {7 result2 l INVISIBLE t "This value is referenced in the above Result if the Use controller wave check box is checked.\n\n" +INVISIBLE}
 result2 {{(sin(((frame*(pi*2/(speed2/2))/2)+theOffset2))+1)/2 i}}
}
 NoOp {
  inputs 0
  name NoOp1
  selected true
  xpos 517
  ypos -209
 }
 Output {
  name Output1
  xpos 517
  ypos -130
 }
end_group
